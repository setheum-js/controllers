{"version":3,"file":"crypto-compare.js","sourceRoot":"","sources":["../../src/apis/crypto-compare.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,kCAAsC;AAEtC,SAAS,aAAa,CACpB,eAAuB,EACvB,cAAsB,EACtB,cAAwB;IAExB,OAAO,CACL,oDAAoD;QACpD,GAAG,cAAc,CAAC,WAAW,EAAE,UAAU,eAAe,CAAC,WAAW,EAAE,EAAE;QACxE,GAAG,cAAc,IAAI,eAAe,CAAC,WAAW,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAC7E,CAAC;AACJ,CAAC;AAED;;;;;;;GAOG;AACH,SAAsB,iBAAiB,CACrC,QAAgB,EAChB,cAAsB,EACtB,cAAwB;;QAMxB,MAAM,IAAI,GAAG,MAAM,kBAAW,CAC5B,aAAa,CAAC,QAAQ,EAAE,cAAc,EAAE,cAAc,CAAC,CACxD,CAAC;QACF,MAAM,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;QAC5D,MAAM,iBAAiB,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC3C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE;YACpC,MAAM,IAAI,KAAK,CACb,wBAAwB,QAAQ,CAAC,WAAW,EAAE,KAC5C,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAC7B,EAAE,CACH,CAAC;SACH;QACD,IAAI,cAAc,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAAE;YACzD,MAAM,IAAI,KAAK,CAAC,2CAA2C,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;SACxE;QAED,OAAO;YACL,cAAc,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI;YACjC,cAAc;YACd,iBAAiB;SAClB,CAAC;IACJ,CAAC;CAAA;AA9BD,8CA8BC","sourcesContent":["import { handleFetch } from '../util';\n\nfunction getPricingURL(\n  currentCurrency: string,\n  nativeCurrency: string,\n  includeUSDRate?: boolean,\n) {\n  return (\n    `https://min-api.cryptocompare.com/data/price?fsym=` +\n    `${nativeCurrency.toUpperCase()}&tsyms=${currentCurrency.toUpperCase()}` +\n    `${includeUSDRate && currentCurrency.toUpperCase() !== 'USD' ? ',USD' : ''}`\n  );\n}\n\n/**\n * Fetches the exchange rate for a given currency\n *\n * @param currency - ISO 4217 currency code\n * @param nativeCurrency - Symbol for base asset\n * @param includeUSDRate - Whether to add the USD rate to the fetch\n * @returns - Promise resolving to exchange rate for given currency\n */\nexport async function fetchExchangeRate(\n  currency: string,\n  nativeCurrency: string,\n  includeUSDRate?: boolean,\n): Promise<{\n  conversionDate: number;\n  conversionRate: number;\n  usdConversionRate: number;\n}> {\n  const json = await handleFetch(\n    getPricingURL(currency, nativeCurrency, includeUSDRate),\n  );\n  const conversionRate = Number(json[currency.toUpperCase()]);\n  const usdConversionRate = Number(json.USD);\n  if (!Number.isFinite(conversionRate)) {\n    throw new Error(\n      `Invalid response for ${currency.toUpperCase()}: ${\n        json[currency.toUpperCase()]\n      }`,\n    );\n  }\n  if (includeUSDRate && !Number.isFinite(usdConversionRate)) {\n    throw new Error(`Invalid response for usdConversionRate: ${json.USD}`);\n  }\n\n  return {\n    conversionDate: Date.now() / 1000,\n    conversionRate,\n    usdConversionRate,\n  };\n}\n"]}