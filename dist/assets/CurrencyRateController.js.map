{"version":3,"file":"CurrencyRateController.js","sourceRoot":"","sources":["../../src/assets/CurrencyRateController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Mutex } from 'async-mutex';\nimport type { Patch } from 'immer';\n\nimport { BaseController } from '../BaseControllerV2';\nimport { safelyExecute } from '../util';\nimport { fetchExchangeRate as defaultFetchExchangeRate } from '../apis/crypto-compare';\n\nimport type { RestrictedControllerMessenger } from '../ControllerMessenger';\n\n/**\n * @type CurrencyRateState\n *\n * @property conversionDate - Timestamp of conversion rate expressed in ms since UNIX epoch\n * @property conversionRate - Conversion rate from current base asset to the current currency\n * @property currentCurrency - Currently-active ISO 4217 currency code\n * @property nativeCurrency - Symbol for the base asset used for conversion\n * @property pendingCurrentCurrency - The currency being switched to\n * @property pendingNativeCurrency - The base asset currency being switched to\n * @property usdConversionRate - Conversion rate from usd to the current currency\n */\nexport type CurrencyRateState = {\n  conversionDate: number;\n  conversionRate: number;\n  currentCurrency: string;\n  nativeCurrency: string;\n  pendingCurrentCurrency: string | null;\n  pendingNativeCurrency: string | null;\n  usdConversionRate: number | null;\n};\n\nconst name = 'CurrencyRateController';\n\nexport type CurrencyRateStateChange = {\n  type: `${typeof name}:stateChange`;\n  payload: [CurrencyRateState, Patch[]];\n};\n\nexport type GetCurrencyRateState = {\n  type: `${typeof name}:getState`;\n  handler: () => CurrencyRateState;\n};\n\nconst metadata = {\n  conversionDate: { persist: true, anonymous: true },\n  conversionRate: { persist: true, anonymous: true },\n  currentCurrency: { persist: true, anonymous: true },\n  nativeCurrency: { persist: true, anonymous: true },\n  pendingCurrentCurrency: { persist: false, anonymous: true },\n  pendingNativeCurrency: { persist: false, anonymous: true },\n  usdConversionRate: { persist: true, anonymous: true },\n};\n\nconst defaultState = {\n  conversionDate: 0,\n  conversionRate: 0,\n  currentCurrency: 'usd',\n  nativeCurrency: 'ETH',\n  pendingCurrentCurrency: null,\n  pendingNativeCurrency: null,\n  usdConversionRate: null,\n};\n\n/**\n * Controller that passively polls on a set interval for an exchange rate from the current base\n * asset to the current currency\n */\nexport class CurrencyRateController extends BaseController<\n  typeof name,\n  CurrencyRateState\n> {\n  private mutex = new Mutex();\n\n  private intervalId?: NodeJS.Timeout;\n\n  private intervalDelay;\n\n  private fetchExchangeRate;\n\n  private includeUsdRate;\n\n  /**\n   * Creates a CurrencyRateController instance\n   *\n   * @param options - Constructor options\n   * @param options.includeUsdRate - Keep track of the USD rate in addition to the current currency rate\n   * @param options.interval - The polling interval, in milliseconds\n   * @param options.messenger - A reference to the messaging system\n   * @param options.state - Initial state to set on this controller\n   * @param options.fetchExchangeRate - Fetches the exchange rate from an external API. This option is primarily meant for use in unit tests.\n   */\n  constructor({\n    includeUsdRate = false,\n    interval = 180000,\n    messenger,\n    state,\n    fetchExchangeRate = defaultFetchExchangeRate,\n  }: {\n    includeUsdRate?: boolean;\n    interval?: number;\n    messenger: RestrictedControllerMessenger<\n      typeof name,\n      GetCurrencyRateState,\n      CurrencyRateStateChange,\n      never,\n      never\n    >;\n    state?: Partial<CurrencyRateState>;\n    fetchExchangeRate?: typeof defaultFetchExchangeRate;\n  }) {\n    super({\n      name,\n      metadata,\n      messenger,\n      state: { ...defaultState, ...state },\n    });\n    this.includeUsdRate = includeUsdRate;\n    this.intervalDelay = interval;\n    this.fetchExchangeRate = fetchExchangeRate;\n  }\n\n  /**\n   * Start polling for the currency rate\n   */\n  async start() {\n    await this.startPolling();\n  }\n\n  /**\n   * Stop polling for the currency rate\n   */\n  stop() {\n    this.stopPolling();\n  }\n\n  /**\n   * Prepare to discard this controller.\n   *\n   * This stops any active polling.\n   */\n  destroy() {\n    super.destroy();\n    this.stopPolling();\n  }\n\n  /**\n   * Sets a currency to track\n   *\n   * @param currentCurrency - ISO 4217 currency code\n   */\n  async setCurrentCurrency(currentCurrency: string) {\n    this.update((state) => {\n      state.pendingCurrentCurrency = currentCurrency;\n    });\n    await this.updateExchangeRate();\n  }\n\n  /**\n   * Sets a new native currency\n   *\n   * @param symbol - Symbol for the base asset\n   */\n  async setNativeCurrency(symbol: string) {\n    this.update((state) => {\n      state.pendingNativeCurrency = symbol;\n    });\n    await this.updateExchangeRate();\n  }\n\n  private stopPolling() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n  }\n\n  /**\n   * Starts a new polling interval\n   */\n  private async startPolling(): Promise<void> {\n    this.stopPolling();\n    // TODO: Expose polling currency rate update errors\n    await safelyExecute(() => this.updateExchangeRate());\n    this.intervalId = setInterval(async () => {\n      await safelyExecute(() => this.updateExchangeRate());\n    }, this.intervalDelay);\n  }\n\n  /**\n   * Updates exchange rate for the current currency\n   */\n  async updateExchangeRate(): Promise<CurrencyRateState | void> {\n    const releaseLock = await this.mutex.acquire();\n    const {\n      currentCurrency,\n      nativeCurrency,\n      pendingCurrentCurrency,\n      pendingNativeCurrency,\n    } = this.state;\n    try {\n      const {\n        conversionDate,\n        conversionRate,\n        usdConversionRate,\n      } = await this.fetchExchangeRate(\n        pendingCurrentCurrency || currentCurrency,\n        pendingNativeCurrency || nativeCurrency,\n        this.includeUsdRate,\n      );\n      this.update(() => {\n        return {\n          conversionDate,\n          conversionRate,\n          currentCurrency: pendingCurrentCurrency || currentCurrency,\n          nativeCurrency: pendingNativeCurrency || nativeCurrency,\n          pendingCurrentCurrency: null,\n          pendingNativeCurrency: null,\n          usdConversionRate,\n        };\n      });\n    } finally {\n      releaseLock();\n    }\n  }\n}\n\nexport default CurrencyRateController;\n"]}