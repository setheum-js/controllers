{"version":3,"file":"AssetsContractController.js","sourceRoot":"","sources":["../../src/assets/AssetsContractController.ts"],"names":[],"mappings":"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","sourcesContent":["import { BN } from 'ethereumjs-util';\nimport Web3 from 'web3';\nimport abiERC20 from 'human-standard-token-abi';\nimport abiERC721 from 'human-standard-collectible-abi';\nimport abiSingleCallBalancesContract from 'single-call-balance-checker-abi';\nimport BaseController, { BaseConfig, BaseState } from '../BaseController';\n\nconst ERC721METADATA_INTERFACE_ID = '0x5b5e139f';\nconst ERC721ENUMERABLE_INTERFACE_ID = '0x780e9d63';\nconst SINGLE_CALL_BALANCES_ADDRESS =\n  '0xb1f8e55c7f64d203c1400b9d8555d050f94adf39';\n\n/**\n * @type AssetsContractConfig\n *\n * Assets Contract controller configuration\n *\n * @property provider - Provider used to create a new web3 instance\n */\nexport interface AssetsContractConfig extends BaseConfig {\n  provider: any;\n}\n\n/**\n * @type BalanceMap\n *\n * Key value object containing the balance for each tokenAddress\n *\n * @property [tokenAddress] - Address of the token\n */\nexport interface BalanceMap {\n  [tokenAddress: string]: BN;\n}\n\n/**\n * Controller that interacts with contracts on mainnet through web3\n */\nexport class AssetsContractController extends BaseController<\n  AssetsContractConfig,\n  BaseState\n> {\n  private web3: any;\n\n  /**\n   *\n   * Query if a contract implements an interface\n   *\n   * @param address - Asset contract address\n   * @param interfaceId - Interface identifier\n   * @returns - Promise resolving to whether the contract implements `interfaceID`\n   */\n  private async contractSupportsInterface(\n    address: string,\n    interfaceId: string,\n  ): Promise<boolean> {\n    const contract = this.web3.eth.contract(abiERC721).at(address);\n    return new Promise<boolean>((resolve, reject) => {\n      contract.supportsInterface(\n        interfaceId,\n        (error: Error, result: boolean) => {\n          /* istanbul ignore if */\n          if (error) {\n            reject(error);\n            return;\n          }\n          resolve(result);\n        },\n      );\n    });\n  }\n\n  /**\n   * Name of this controller used during composition\n   */\n  name = 'AssetsContractController';\n\n  /**\n   * Creates a AssetsContractController instance\n   *\n   * @param config - Initial options used to configure this controller\n   * @param state - Initial state to set on this controller\n   */\n  constructor(\n    config?: Partial<AssetsContractConfig>,\n    state?: Partial<BaseState>,\n  ) {\n    super(config, state);\n    this.defaultConfig = {\n      provider: undefined,\n    };\n    this.initialize();\n  }\n\n  /**\n   * Sets a new provider\n   *\n   * TODO: Replace this wth a method\n   *\n   * @property provider - Provider used to create a new underlying Web3 instance\n   */\n  set provider(provider: any) {\n    this.web3 = new Web3(provider);\n  }\n\n  get provider() {\n    throw new Error('Property only used for setting');\n  }\n\n  /**\n   * Query if contract implements ERC721Metadata interface\n   *\n   * @param address - ERC721 asset contract address\n   * @returns - Promise resolving to whether the contract implements ERC721Metadata interface\n   */\n  async contractSupportsMetadataInterface(address: string): Promise<boolean> {\n    return this.contractSupportsInterface(address, ERC721METADATA_INTERFACE_ID);\n  }\n\n  /**\n   * Query if contract implements ERC721Enumerable interface\n   *\n   * @param address - ERC721 asset contract address\n   * @returns - Promise resolving to whether the contract implements ERC721Enumerable interface\n   */\n  async contractSupportsEnumerableInterface(address: string): Promise<boolean> {\n    return this.contractSupportsInterface(\n      address,\n      ERC721ENUMERABLE_INTERFACE_ID,\n    );\n  }\n\n  /**\n   * Get balance or count for current account on specific asset contract\n   *\n   * @param address - Asset contract address\n   * @param selectedAddress - Current account public address\n   * @returns - Promise resolving to BN object containing balance for current account on specific asset contract\n   */\n  async getBalanceOf(address: string, selectedAddress: string): Promise<BN> {\n    const contract = this.web3.eth.contract(abiERC20).at(address);\n    return new Promise<BN>((resolve, reject) => {\n      contract.balanceOf(selectedAddress, (error: Error, result: BN) => {\n        /* istanbul ignore if */\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(result);\n      });\n    });\n  }\n\n  /**\n   * Enumerate assets assigned to an owner\n   *\n   * @param address - ERC721 asset contract address\n   * @param selectedAddress - Current account public address\n   * @param index - A collectible counter less than `balanceOf(selectedAddress)`\n   * @returns - Promise resolving to token identifier for the 'index'th asset assigned to 'selectedAddress'\n   */\n  getCollectibleTokenId(\n    address: string,\n    selectedAddress: string,\n    index: number,\n  ): Promise<number> {\n    const contract = this.web3.eth.contract(abiERC721).at(address);\n    return new Promise<number>((resolve, reject) => {\n      contract.tokenOfOwnerByIndex(\n        selectedAddress,\n        index,\n        (error: Error, result: BN) => {\n          /* istanbul ignore if */\n          if (error) {\n            reject(error);\n            return;\n          }\n          resolve(result.toNumber());\n        },\n      );\n    });\n  }\n\n  /**\n   * Query for tokenURI for a given asset\n   *\n   * @param address - ERC721 asset contract address\n   * @param tokenId - ERC721 asset identifier\n   * @returns - Promise resolving to the 'tokenURI'\n   */\n  async getCollectibleTokenURI(\n    address: string,\n    tokenId: number,\n  ): Promise<string> {\n    const supportsMetadata = await this.contractSupportsMetadataInterface(\n      address,\n    );\n    if (!supportsMetadata) {\n      return '';\n    }\n    const contract = this.web3.eth.contract(abiERC721).at(address);\n    return new Promise<string>((resolve, reject) => {\n      contract.tokenURI(tokenId, (error: Error, result: string) => {\n        /* istanbul ignore if */\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(result);\n      });\n    });\n  }\n\n  /**\n   * Query for name for a given ERC20 asset\n   *\n   * @param address - ERC20 asset contract address\n   * @returns - Promise resolving to the 'decimals'\n   */\n  async getTokenDecimals(address: string): Promise<string> {\n    const contract = this.web3.eth.contract(abiERC20).at(address);\n    return new Promise<string>((resolve, reject) => {\n      contract.decimals((error: Error, result: string) => {\n        /* istanbul ignore if */\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(result);\n      });\n    });\n  }\n\n  /**\n   * Query for name for a given asset\n   *\n   * @param address - ERC721 or ERC20 asset contract address\n   * @returns - Promise resolving to the 'name'\n   */\n  async getAssetName(address: string): Promise<string> {\n    const contract = this.web3.eth.contract(abiERC721).at(address);\n    return new Promise<string>((resolve, reject) => {\n      contract.name((error: Error, result: string) => {\n        /* istanbul ignore if */\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(result);\n      });\n    });\n  }\n\n  /**\n   * Query for symbol for a given asset\n   *\n   * @param address - ERC721 or ERC20 asset contract address\n   * @returns - Promise resolving to the 'symbol'\n   */\n  async getAssetSymbol(address: string): Promise<string> {\n    const contract = this.web3.eth.contract(abiERC721).at(address);\n    return new Promise<string>((resolve, reject) => {\n      contract.symbol((error: Error, result: string) => {\n        /* istanbul ignore if */\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(result);\n      });\n    });\n  }\n\n  /**\n   * Query for owner for a given ERC721 asset\n   *\n   * @param address - ERC721 asset contract address\n   * @param tokenId - ERC721 asset identifier\n   * @returns - Promise resolving to the owner address\n   */\n  async getOwnerOf(address: string, tokenId: number): Promise<string> {\n    const contract = this.web3.eth.contract(abiERC721).at(address);\n    return new Promise<string>((resolve, reject) => {\n      contract.ownerOf(tokenId, (error: Error, result: string) => {\n        /* istanbul ignore if */\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(result);\n      });\n    });\n  }\n\n  /**\n   * Returns contract instance of\n   *\n   * @returns - Promise resolving to the 'tokenURI'\n   */\n  async getBalancesInSingleCall(\n    selectedAddress: string,\n    tokensToDetect: string[],\n  ) {\n    const contract = this.web3.eth\n      .contract(abiSingleCallBalancesContract)\n      .at(SINGLE_CALL_BALANCES_ADDRESS);\n    return new Promise<BalanceMap>((resolve, reject) => {\n      contract.balances(\n        [selectedAddress],\n        tokensToDetect,\n        (error: Error, result: BN[]) => {\n          /* istanbul ignore if */\n          if (error) {\n            reject(error);\n            return;\n          }\n          const nonZeroBalances: BalanceMap = {};\n          /* istanbul ignore else */\n          if (result.length > 0) {\n            tokensToDetect.forEach((tokenAddress, index) => {\n              const balance: BN = result[index];\n              /* istanbul ignore else */\n              if (!balance.isZero()) {\n                nonZeroBalances[tokenAddress] = balance;\n              }\n            });\n          }\n          resolve(nonZeroBalances);\n        },\n      );\n    });\n  }\n}\n\nexport default AssetsContractController;\n"]}