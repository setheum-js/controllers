{"version":3,"file":"util.js","sourceRoot":"","sources":["../src/util.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,qDAAgF;AAChF,2CAA4C;AAC5C,mDAA2C;AAC3C,wEAA2C;AAC3C,+CAAwE;AACxE,4DAAoC;AAUpC,MAAM,KAAK,GAAG,kBAAkB,CAAC;AAEjC,MAAM,WAAW,GAA0C;IACzD,IAAI,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,8BAAY,CAAC,IAAI,CAAC;IAC1C,IAAI,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,8BAAY,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE;IACxD,GAAG,EAAE,CAAC,GAAW,EAAE,EAAE,CAAC,8BAAY,CAAC,GAAG,CAAC;IACvC,QAAQ,EAAE,CAAC,QAAgB,EAAE,EAAE,CAAC,8BAAY,CAAC,QAAQ,CAAC;IACtD,KAAK,EAAE,CAAC,KAAa,EAAE,EAAE,CAAC,8BAAY,CAAC,KAAK,CAAC;IAC7C,EAAE,EAAE,CAAC,EAAU,EAAE,EAAE,CAAC,8BAAY,CAAC,EAAE,CAAC,CAAC,WAAW,EAAE;IAClD,KAAK,EAAE,CAAC,KAAa,EAAE,EAAE,CAAC,8BAAY,CAAC,KAAK,CAAC;CAC9C,CAAC;AAEF;;;;;;GAMG;AACH,SAAgB,OAAO,CAAC,OAAY;IAClC,OAAO,8BAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;AAC5C,CAAC;AAFD,0BAEC;AAED;;;;;;;GAOG;AACH,SAAgB,UAAU,CACxB,QAAa,EACb,SAA0B,EAC1B,WAA4B;IAE5B,MAAM,KAAK,GAAG,IAAI,oBAAE,CAAC,SAAS,CAAC,CAAC;IAChC,MAAM,OAAO,GAAG,IAAI,oBAAE,CAAC,WAAW,CAAC,CAAC;IACpC,OAAO,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AAC1C,CAAC;AARD,gCAQC;AAED;;;;;;;GAOG;AACH,SAAgB,SAAS,CACvB,WAAW,GAAG,GAAG,EACjB,OAAgB,EAChB,MAAM,GAAG,CAAC;IAEV,QAAQ,WAAW,EAAE;QACnB,KAAK,GAAG;YACN,OAAO,8EAA8E,MAAM,YAAY,OAAO,sBAAsB,CAAC;QACvI,KAAK,GAAG;YACN,OAAO,6BAA6B,CAAC;QACvC,KAAK,GAAG;YACN,OAAO,yBAAyB,CAAC;QACnC,KAAK,GAAG;YACN,OAAO,iCAAiC,CAAC;QAC3C,KAAK,IAAI;YACP,OAAO,yCAAyC,CAAC;QACnD;YACE,OAAO,SAAS,CAAC;KACpB;AACH,CAAC;AAnBD,8BAmBC;AAED;;;;;;;GAOG;AACH,SAAgB,kBAAkB,CAChC,WAAmB,EACnB,OAAe,EACf,MAAc,EACd,SAAkB,EAClB,eAAwB;IAExB,IAAI,kBAAkB,GAAG,KAAK,CAAC;IAC/B,IAAI,WAAW,KAAK,SAAS,EAAE;QAC7B,kBAAkB,GAAG,OAAO,WAAW,EAAE,CAAC;KAC3C;IACD,MAAM,MAAM,GAAG,WAAW,kBAAkB,eAAe,CAAC;IAC5D,IAAI,GAAG,GAAG,GAAG,MAAM,8BAA8B,MAAM,YAAY,OAAO,oBAAoB,CAAC;IAC/F,IAAI,SAAS,EAAE;QACb,GAAG,IAAI,eAAe,SAAS,EAAE,CAAC;KACnC;IACD,IAAI,eAAe,EAAE;QACnB,GAAG,IAAI,WAAW,eAAe,EAAE,CAAC;KACrC;IACD,OAAO,GAAG,CAAC;AACb,CAAC;AApBD,gDAoBC;AAED;;;;;;;GAOG;AACH,SAAsB,sBAAsB,CAC1C,WAAmB,EACnB,OAAe,EACf,GAAqB;;QAErB,eAAe;QACf,MAAM,cAAc,GAAG,kBAAkB,CACvC,WAAW,EACX,OAAO,EACP,QAAQ,EACR,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,SAAS,EACd,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,eAAe,CACrB,CAAC;QACF,MAAM,0BAA0B,GAAG,WAAW,CAAC,cAAc,CAAC,CAAC;QAE/D,SAAS;QACT,MAAM,iBAAiB,GAAG,kBAAkB,CAC1C,WAAW,EACX,OAAO,EACP,SAAS,EACT,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,SAAS,EACd,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,eAAe,CACrB,CAAC;QACF,MAAM,6BAA6B,GAAG,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAErE,IAAI,CAAC,mBAAmB,EAAE,sBAAsB,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YACpE,0BAA0B;YAC1B,6BAA6B;SAC9B,CAAC,CAAC;QAEH,IACE,mBAAmB,CAAC,MAAM,KAAK,GAAG;YAClC,mBAAmB,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,EACtC;YACA,mBAAmB,GAAG,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC;SACtC;QAED,IACE,sBAAsB,CAAC,MAAM,KAAK,GAAG;YACrC,sBAAsB,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,EACzC;YACA,sBAAsB,GAAG,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC;SACzC;QAED,OAAO,CAAC,mBAAmB,EAAE,sBAAsB,CAAC,CAAC;IACvD,CAAC;CAAA;AA7CD,wDA6CC;AAED;;;;;;GAMG;AACH,SAAgB,OAAO,CAAC,QAAgB;IACtC,OAAO,IAAI,oBAAE,CAAC,2BAAc,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC;AAC9C,CAAC;AAFD,0BAEC;AAED;;;;;;GAMG;AACH,SAAgB,SAAS,CAAC,GAAW;IACnC,IAAI;QACF,MAAM,QAAQ,GAAG,2BAAc,CAAC,GAAG,CAAC,CAAC;QACrC,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC1C,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;KAC9B;IAAC,OAAO,CAAC,EAAE;QACV,0BAA0B;QAC1B,OAAO,GAAG,CAAC;KACZ;AACH,CAAC;AATD,8BASC;AAED;;;;;GAKG;AACH,SAAgB,oBAAoB,CAAC,WAAwB;IAC3D,MAAM,qBAAqB,GAAgB,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;IACxD,IAAI,GAAsB,CAAC;IAC3B,KAAK,GAAG,IAAI,WAAW,EAAE;QACvB,IAAI,WAAW,CAAC,GAAwB,CAAC,EAAE;YACzC,qBAAqB,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAU,CAAC;SAC1E;KACF;IACD,OAAO,qBAAqB,CAAC;AAC/B,CAAC;AATD,oDASC;AAED;;;;;;;GAOG;AACH,SAAsB,aAAa,CACjC,SAA6B,EAC7B,QAAQ,GAAG,KAAK,EAChB,KAA8B;;QAE9B,IAAI;YACF,OAAO,MAAM,SAAS,EAAE,CAAC;SAC1B;QAAC,OAAO,KAAK,EAAE;YACd,0BAA0B;YAC1B,IAAI,QAAQ,EAAE;gBACZ,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;aACtB;YACD,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAG,KAAK,CAAC,CAAC;YACf,OAAO,SAAS,CAAC;SAClB;IACH,CAAC;CAAA;AAfD,sCAeC;AAED;;;;;;;;GAQG;AACH,SAAsB,wBAAwB,CAC5C,SAA6B,EAC7B,QAAQ,GAAG,KAAK,EAChB,OAAO,GAAG,GAAG;;QAEb,IAAI;YACF,OAAO,MAAM,OAAO,CAAC,IAAI,CAAC;gBACxB,SAAS,EAAE;gBACX,IAAI,OAAO,CAAO,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE,CAC9B,UAAU,CAAC,GAAG,EAAE;oBACd,MAAM,CAAC,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;gBAC/B,CAAC,EAAE,OAAO,CAAC,CACZ;aACF,CAAC,CAAC;SACJ;QAAC,OAAO,KAAK,EAAE;YACd,0BAA0B;YAC1B,IAAI,QAAQ,EAAE;gBACZ,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;aACtB;YACD,OAAO,SAAS,CAAC;SAClB;IACH,CAAC;CAAA;AArBD,4DAqBC;AAED;;;;;GAKG;AACH,SAAgB,mBAAmB,CAAC,WAAwB;IAC1D,IACE,CAAC,WAAW,CAAC,IAAI;QACjB,OAAO,WAAW,CAAC,IAAI,KAAK,QAAQ;QACpC,CAAC,gCAAc,CAAC,WAAW,CAAC,IAAI,CAAC,EACjC;QACA,MAAM,IAAI,KAAK,CACb,2BAA2B,WAAW,CAAC,IAAI,0BAA0B,CACtE,CAAC;KACH;IACD,IAAI,WAAW,CAAC,EAAE,KAAK,IAAI,IAAI,WAAW,CAAC,EAAE,KAAK,SAAS,EAAE;QAC3D,IAAI,WAAW,CAAC,IAAI,EAAE;YACpB,OAAO,WAAW,CAAC,EAAE,CAAC;SACvB;aAAM;YACL,MAAM,IAAI,KAAK,CACb,yBAAyB,WAAW,CAAC,EAAE,0BAA0B,CAClE,CAAC;SACH;KACF;SAAM,IAAI,WAAW,CAAC,EAAE,KAAK,SAAS,IAAI,CAAC,gCAAc,CAAC,WAAW,CAAC,EAAE,CAAC,EAAE;QAC1E,MAAM,IAAI,KAAK,CACb,yBAAyB,WAAW,CAAC,EAAE,0BAA0B,CAClE,CAAC;KACH;IACD,IAAI,WAAW,CAAC,KAAK,KAAK,SAAS,EAAE;QACnC,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;QAC3C,IAAI,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YACvB,MAAM,IAAI,KAAK,CAAC,oBAAoB,KAAK,4BAA4B,CAAC,CAAC;SACxE;QACD,IAAI,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YACvB,MAAM,IAAI,KAAK,CACb,oBAAoB,KAAK,qCAAqC,CAC/D,CAAC;SACH;QACD,MAAM,QAAQ,GAAG,QAAQ,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QACjD,MAAM,OAAO,GACX,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;YACzB,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC;YACvB,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACrB,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QACjC,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,IAAI,KAAK,CACb,oBAAoB,KAAK,iCAAiC,CAC3D,CAAC;SACH;KACF;AACH,CAAC;AA7CD,kDA6CC;AAED;;;;;;;GAOG;AACH,SAAgB,oBAAoB,CAAC,IAAY;IAC/C,IAAI;QACF,MAAM,QAAQ,GAAG,2BAAc,CAAC,IAAI,CAAC,CAAC;QACtC,IAAI,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YACzB,OAAO,8BAAY,CAAC,QAAQ,CAAC,CAAC;SAC/B;KACF;IAAC,OAAO,CAAC,EAAE;QACV,0BAA0B;KAC3B;IACD,OAAO,6BAAW,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;AAChD,CAAC;AAVD,oDAUC;AAED;;;;;GAKG;AACH,SAAgB,uBAAuB,CACrC,WAAkD;IAElD,IACE,CAAC,WAAW,CAAC,IAAI;QACjB,OAAO,WAAW,CAAC,IAAI,KAAK,QAAQ;QACpC,CAAC,gCAAc,CAAC,WAAW,CAAC,IAAI,CAAC,EACjC;QACA,MAAM,IAAI,KAAK,CACb,2BAA2B,WAAW,CAAC,IAAI,0BAA0B,CACtE,CAAC;KACH;IACD,IAAI,CAAC,WAAW,CAAC,IAAI,IAAI,OAAO,WAAW,CAAC,IAAI,KAAK,QAAQ,EAAE;QAC7D,MAAM,IAAI,KAAK,CACb,2BAA2B,WAAW,CAAC,IAAI,0BAA0B,CACtE,CAAC;KACH;AACH,CAAC;AAjBD,0DAiBC;AAED;;;;;;GAMG;AACH,SAAgB,8BAA8B,CAC5C,WAA+B;IAE/B,IACE,CAAC,WAAW,CAAC,IAAI;QACjB,OAAO,WAAW,CAAC,IAAI,KAAK,QAAQ;QACpC,CAAC,gCAAc,CAAC,WAAW,CAAC,IAAI,CAAC,EACjC;QACA,MAAM,IAAI,KAAK,CACb,2BAA2B,WAAW,CAAC,IAAI,0BAA0B,CACtE,CAAC;KACH;IACD,IAAI,CAAC,WAAW,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE;QACzD,MAAM,IAAI,KAAK,CACb,2BAA2B,WAAW,CAAC,IAAI,yBAAyB,CACrE,CAAC;KACH;IACD,IAAI;QACF,wDAAwD;QACxD,iCAAkB,CAAC,WAAW,CAAC,IAAW,CAAC,CAAC;KAC7C;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;KAChD;AACH,CAAC;AAvBD,wEAuBC;AAED;;;;;GAKG;AACH,SAAgB,8BAA8B,CAC5C,WAA+B;IAE/B,IACE,CAAC,WAAW,CAAC,IAAI;QACjB,OAAO,WAAW,CAAC,IAAI,KAAK,QAAQ;QACpC,CAAC,gCAAc,CAAC,WAAW,CAAC,IAAI,CAAC,EACjC;QACA,MAAM,IAAI,KAAK,CACb,2BAA2B,WAAW,CAAC,IAAI,0BAA0B,CACtE,CAAC;KACH;IACD,IAAI,CAAC,WAAW,CAAC,IAAI,IAAI,OAAO,WAAW,CAAC,IAAI,KAAK,QAAQ,EAAE;QAC7D,MAAM,IAAI,KAAK,CACb,2BAA2B,WAAW,CAAC,IAAI,yBAAyB,CACrE,CAAC;KACH;IACD,IAAI,IAAI,CAAC;IACT,IAAI;QACF,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;KACrC;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;KAChE;IACD,MAAM,UAAU,GAAG,oBAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,mCAAoB,CAAC,CAAC;IACnE,IAAI,UAAU,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;QAChC,MAAM,IAAI,KAAK,CACb,gEAAgE,CACjE,CAAC;KACH;AACH,CAAC;AA7BD,wEA6BC;AAED;;;;GAIG;AACH,SAAgB,oBAAoB,CAAC,KAAY;IAC/C,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC;IAC5C,IAAI,CAAC,OAAO,IAAI,CAAC,MAAM,IAAI,OAAO,QAAQ,KAAK,WAAW,EAAE;QAC1D,MAAM,0BAAS,CAAC,GAAG,CAAC,aAAa,CAC/B,6CAA6C,CAC9C,CAAC;KACH;IACD,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;QAC9B,MAAM,0BAAS,CAAC,GAAG,CAAC,aAAa,CAAC,+BAA+B,CAAC,CAAC;KACpE;IACD,IAAI,MAAM,CAAC,MAAM,GAAG,EAAE,EAAE;QACtB,MAAM,0BAAS,CAAC,GAAG,CAAC,aAAa,CAC/B,mBAAmB,MAAM,+BAA+B,CACzD,CAAC;KACH;IACD,MAAM,WAAW,GAAG,QAAQ,CAAE,QAA8B,EAAE,EAAE,CAAC,CAAC;IAClE,IAAI,KAAK,CAAC,WAAW,CAAC,IAAI,WAAW,GAAG,EAAE,IAAI,WAAW,GAAG,CAAC,EAAE;QAC7D,MAAM,0BAAS,CAAC,GAAG,CAAC,aAAa,CAC/B,qBAAqB,QAAQ,qBAAqB,CACnD,CAAC;KACH;IACD,IAAI,CAAC,gCAAc,CAAC,OAAO,CAAC,EAAE;QAC5B,MAAM,0BAAS,CAAC,GAAG,CAAC,aAAa,CAAC,oBAAoB,OAAO,IAAI,CAAC,CAAC;KACpE;AACH,CAAC;AAxBD,oDAwBC;AAED;;;;GAIG;AACH,SAAgB,mBAAmB,CAAC,IAAY;IAC9C,wBAAwB;IACxB,IAAI,CAAC,IAAI,EAAE;QACT,OAAO,KAAK,CAAC;KACd;IACD,mEAAmE;IACnE,MAAM,iBAAiB,GAAG,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,KAAK,CAAC;IAC1D,OAAO,iBAAiB,CAAC;AAC3B,CAAC;AARD,kDAQC;AAED;;;;;;GAMG;AACH,SAAsB,eAAe,CAAC,OAAe,EAAE,OAAqB;;QAC1E,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC/C,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;YAChB,MAAM,IAAI,KAAK,CACb,6BAA6B,QAAQ,CAAC,MAAM,kBAAkB,OAAO,GAAG,CACzE,CAAC;SACH;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;CAAA;AARD,0CAQC;AAED;;;;;;GAMG;AACH,SAAsB,WAAW,CAAC,OAAe,EAAE,OAAqB;;QACtE,MAAM,QAAQ,GAAG,MAAM,eAAe,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACzD,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QACrC,OAAO,MAAM,CAAC;IAChB,CAAC;CAAA;AAJD,kCAIC;AAED;;;;;;;;GAQG;AACH,SAAsB,YAAY,CAChC,GAAW,EACX,OAAqB,EACrB,OAAO,GAAG,GAAG;;QAEb,OAAO,OAAO,CAAC,IAAI,CAAC;YAClB,eAAe,CAAC,GAAG,EAAE,OAAO,CAAC;YAC7B,IAAI,OAAO,CAAW,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE,CAClC,UAAU,CAAC,GAAG,EAAE;gBACd,MAAM,CAAC,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;YAC/B,CAAC,EAAE,OAAO,CAAC,CACZ;SACF,CAAC,CAAC;IACL,CAAC;CAAA;AAbD,oCAaC;AAED;;;;;;GAMG;AACH,SAAgB,gBAAgB,CAAC,OAAe;IAC9C,IAAI,OAAO,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;QAC1C,IAAI;YACF,MAAM,UAAU,GAAG,0BAAW,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;YACzD,6EAA6E;YAC7E,iEAAiE;YACjE,IAAI,UAAU,CAAC,KAAK,CAAC,2CAA2C,CAAC,EAAE;gBACjE,OAAO,UAAU,CAAC;aACnB;SACF;QAAC,OAAO,CAAC,EAAE;YACV,aAAa;SACd;KACF;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAdD,4CAcC;AAED;;;;;;;;GAQG;AACH,SAAgB,KAAK,CACnB,QAAa,EACb,MAAc,EACd,OAAc,EAAE;IAEhB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACrC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,EAAE,CAAC,KAAY,EAAE,MAAW,EAAE,EAAE;YACtD,IAAI,KAAK,EAAE;gBACT,MAAM,CAAC,KAAK,CAAC,CAAC;gBACd,OAAO;aACR;YACD,OAAO,CAAC,MAAM,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAdD,sBAcC;AAED,kBAAe;IACb,OAAO;IACP,UAAU;IACV,KAAK;IACL,SAAS;IACT,WAAW;IACX,OAAO;IACP,SAAS;IACT,mBAAmB;IACnB,oBAAoB;IACpB,aAAa;IACb,wBAAwB;IACxB,eAAe;IACf,YAAY;IACZ,oBAAoB;IACpB,mBAAmB;IACnB,8BAA8B;IAC9B,8BAA8B;CAC/B,CAAC","sourcesContent":["import { addHexPrefix, isValidAddress, bufferToHex, BN } from 'ethereumjs-util';\nimport { stripHexPrefix } from 'ethjs-util';\nimport { ethErrors } from 'eth-rpc-errors';\nimport ensNamehash from 'eth-ens-namehash';\nimport { TYPED_MESSAGE_SCHEMA, typedSignatureHash } from 'eth-sig-util';\nimport jsonschema from 'jsonschema';\nimport {\n  Transaction,\n  FetchAllOptions,\n} from './transaction/TransactionController';\nimport { MessageParams } from './message-manager/MessageManager';\nimport { PersonalMessageParams } from './message-manager/PersonalMessageManager';\nimport { TypedMessageParams } from './message-manager/TypedMessageManager';\nimport { Token } from './assets/TokenRatesController';\n\nconst hexRe = /^[0-9A-Fa-f]+$/gu;\n\nconst NORMALIZERS: { [param in keyof Transaction]: any } = {\n  data: (data: string) => addHexPrefix(data),\n  from: (from: string) => addHexPrefix(from).toLowerCase(),\n  gas: (gas: string) => addHexPrefix(gas),\n  gasPrice: (gasPrice: string) => addHexPrefix(gasPrice),\n  nonce: (nonce: string) => addHexPrefix(nonce),\n  to: (to: string) => addHexPrefix(to).toLowerCase(),\n  value: (value: string) => addHexPrefix(value),\n};\n\n/**\n * Converts a BN object to a hex string with a '0x' prefix\n *\n * @param inputBn - BN instance to convert to a hex string\n * @returns - '0x'-prefixed hex string\n *\n */\nexport function BNToHex(inputBn: any) {\n  return addHexPrefix(inputBn.toString(16));\n}\n\n/**\n * Used to multiply a BN by a fraction\n *\n * @param targetBN - Number to multiply by a fraction\n * @param numerator - Numerator of the fraction multiplier\n * @param denominator - Denominator of the fraction multiplier\n * @returns - Product of the multiplication\n */\nexport function fractionBN(\n  targetBN: any,\n  numerator: number | string,\n  denominator: number | string,\n) {\n  const numBN = new BN(numerator);\n  const denomBN = new BN(denominator);\n  return targetBN.mul(numBN).div(denomBN);\n}\n\n/**\n * Return a URL that can be used to obtain ETH for a given network\n *\n * @param networkCode - Network code of desired network\n * @param address - Address to deposit obtained ETH\n * @param amount - How much ETH is desired\n * @returns - URL to buy ETH based on network\n */\nexport function getBuyURL(\n  networkCode = '1',\n  address?: string,\n  amount = 5,\n): string | undefined {\n  switch (networkCode) {\n    case '1':\n      return `https://buy.coinbase.com/?code=9ec56d01-7e81-5017-930c-513daa27bb6a&amount=${amount}&address=${address}&crypto_currency=ETH`;\n    case '3':\n      return 'https://faucet.metamask.io/';\n    case '4':\n      return 'https://www.rinkeby.io/';\n    case '5':\n      return 'https://goerli-faucet.slock.it/';\n    case '42':\n      return 'https://github.com/kovan-testnet/faucet';\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Return a URL that can be used to fetch ETH transactions\n *\n * @param networkType - Network type of desired network\n * @param address - Address to get the transactions from\n * @param fromBlock? - Block from which transactions are needed\n * @returns - URL to fetch the transactions from\n */\nexport function getEtherscanApiUrl(\n  networkType: string,\n  address: string,\n  action: string,\n  fromBlock?: string,\n  etherscanApiKey?: string,\n): string {\n  let etherscanSubdomain = 'api';\n  if (networkType !== 'mainnet') {\n    etherscanSubdomain = `api-${networkType}`;\n  }\n  const apiUrl = `https://${etherscanSubdomain}.etherscan.io`;\n  let url = `${apiUrl}/api?module=account&action=${action}&address=${address}&tag=latest&page=1`;\n  if (fromBlock) {\n    url += `&startBlock=${fromBlock}`;\n  }\n  if (etherscanApiKey) {\n    url += `&apikey=${etherscanApiKey}`;\n  }\n  return url;\n}\n\n/**\n * Handles the fetch of incoming transactions\n *\n * @param networkType - Network type of desired network\n * @param address - Address to get the transactions from\n * @param opt? - Object that can contain fromBlock and Etherscan service API key\n * @returns - Responses for both ETH and ERC20 token transactions\n */\nexport async function handleTransactionFetch(\n  networkType: string,\n  address: string,\n  opt?: FetchAllOptions,\n): Promise<[{ [result: string]: [] }, { [result: string]: [] }]> {\n  // transactions\n  const etherscanTxUrl = getEtherscanApiUrl(\n    networkType,\n    address,\n    'txlist',\n    opt?.fromBlock,\n    opt?.etherscanApiKey,\n  );\n  const etherscanTxResponsePromise = handleFetch(etherscanTxUrl);\n\n  // tokens\n  const etherscanTokenUrl = getEtherscanApiUrl(\n    networkType,\n    address,\n    'tokentx',\n    opt?.fromBlock,\n    opt?.etherscanApiKey,\n  );\n  const etherscanTokenResponsePromise = handleFetch(etherscanTokenUrl);\n\n  let [etherscanTxResponse, etherscanTokenResponse] = await Promise.all([\n    etherscanTxResponsePromise,\n    etherscanTokenResponsePromise,\n  ]);\n\n  if (\n    etherscanTxResponse.status === '0' ||\n    etherscanTxResponse.result.length <= 0\n  ) {\n    etherscanTxResponse = { result: [] };\n  }\n\n  if (\n    etherscanTokenResponse.status === '0' ||\n    etherscanTokenResponse.result.length <= 0\n  ) {\n    etherscanTokenResponse = { result: [] };\n  }\n\n  return [etherscanTxResponse, etherscanTokenResponse];\n}\n\n/**\n * Converts a hex string to a BN object\n *\n * @param inputHex - Number represented as a hex string\n * @returns - A BN instance\n *\n */\nexport function hexToBN(inputHex: string) {\n  return new BN(stripHexPrefix(inputHex), 16);\n}\n\n/**\n * A helper function that converts hex data to human readable string\n *\n * @param hex - The hex string to convert to string\n * @returns - A human readable string conversion\n *\n */\nexport function hexToText(hex: string) {\n  try {\n    const stripped = stripHexPrefix(hex);\n    const buff = Buffer.from(stripped, 'hex');\n    return buff.toString('utf8');\n  } catch (e) {\n    /* istanbul ignore next */\n    return hex;\n  }\n}\n\n/**\n * Normalizes properties on a Transaction object\n *\n * @param transaction - Transaction object to normalize\n * @returns - Normalized Transaction object\n */\nexport function normalizeTransaction(transaction: Transaction) {\n  const normalizedTransaction: Transaction = { from: '' };\n  let key: keyof Transaction;\n  for (key in NORMALIZERS) {\n    if (transaction[key as keyof Transaction]) {\n      normalizedTransaction[key] = NORMALIZERS[key](transaction[key]) as never;\n    }\n  }\n  return normalizedTransaction;\n}\n\n/**\n * Execute and return an asynchronous operation without throwing errors\n *\n * @param operation - Function returning a Promise\n * @param logError - Determines if the error should be logged\n * @param retry - Function called if an error is caught\n * @returns - Promise resolving to the result of the async operation\n */\nexport async function safelyExecute(\n  operation: () => Promise<any>,\n  logError = false,\n  retry?: (error: Error) => void,\n) {\n  try {\n    return await operation();\n  } catch (error) {\n    /* istanbul ignore next */\n    if (logError) {\n      console.error(error);\n    }\n    retry?.(error);\n    return undefined;\n  }\n}\n\n/**\n * Execute and return an asynchronous operation with a timeout\n *\n * @param operation - Function returning a Promise\n * @param logError - Determines if the error should be logged\n * @param retry - Function called if an error is caught\n * @param timeout - Timeout to fail the operation\n * @returns - Promise resolving to the result of the async operation\n */\nexport async function safelyExecuteWithTimeout(\n  operation: () => Promise<any>,\n  logError = false,\n  timeout = 500,\n) {\n  try {\n    return await Promise.race([\n      operation(),\n      new Promise<void>((_, reject) =>\n        setTimeout(() => {\n          reject(new Error('timeout'));\n        }, timeout),\n      ),\n    ]);\n  } catch (error) {\n    /* istanbul ignore next */\n    if (logError) {\n      console.error(error);\n    }\n    return undefined;\n  }\n}\n\n/**\n * Validates a Transaction object for required properties and throws in\n * the event of any validation error.\n *\n * @param transaction - Transaction object to validate\n */\nexport function validateTransaction(transaction: Transaction) {\n  if (\n    !transaction.from ||\n    typeof transaction.from !== 'string' ||\n    !isValidAddress(transaction.from)\n  ) {\n    throw new Error(\n      `Invalid \"from\" address: ${transaction.from} must be a valid string.`,\n    );\n  }\n  if (transaction.to === '0x' || transaction.to === undefined) {\n    if (transaction.data) {\n      delete transaction.to;\n    } else {\n      throw new Error(\n        `Invalid \"to\" address: ${transaction.to} must be a valid string.`,\n      );\n    }\n  } else if (transaction.to !== undefined && !isValidAddress(transaction.to)) {\n    throw new Error(\n      `Invalid \"to\" address: ${transaction.to} must be a valid string.`,\n    );\n  }\n  if (transaction.value !== undefined) {\n    const value = transaction.value.toString();\n    if (value.includes('-')) {\n      throw new Error(`Invalid \"value\": ${value} is not a positive number.`);\n    }\n    if (value.includes('.')) {\n      throw new Error(\n        `Invalid \"value\": ${value} number must be denominated in wei.`,\n      );\n    }\n    const intValue = parseInt(transaction.value, 10);\n    const isValid =\n      Number.isFinite(intValue) &&\n      !Number.isNaN(intValue) &&\n      !isNaN(Number(value)) &&\n      Number.isSafeInteger(intValue);\n    if (!isValid) {\n      throw new Error(\n        `Invalid \"value\": ${value} number must be a valid number.`,\n      );\n    }\n  }\n}\n\n/**\n * A helper function that converts rawmessageData buffer data to a hex, or just returns the data if\n * it is already formatted as a hex.\n *\n * @param data - The buffer data to convert to a hex\n * @returns - A hex string conversion of the buffer data\n *\n */\nexport function normalizeMessageData(data: string) {\n  try {\n    const stripped = stripHexPrefix(data);\n    if (stripped.match(hexRe)) {\n      return addHexPrefix(stripped);\n    }\n  } catch (e) {\n    /* istanbul ignore next */\n  }\n  return bufferToHex(Buffer.from(data, 'utf8'));\n}\n\n/**\n * Validates a PersonalMessageParams and MessageParams objects for required properties and throws in\n * the event of any validation error.\n *\n * @param messageData - PersonalMessageParams object to validate\n */\nexport function validateSignMessageData(\n  messageData: PersonalMessageParams | MessageParams,\n) {\n  if (\n    !messageData.from ||\n    typeof messageData.from !== 'string' ||\n    !isValidAddress(messageData.from)\n  ) {\n    throw new Error(\n      `Invalid \"from\" address: ${messageData.from} must be a valid string.`,\n    );\n  }\n  if (!messageData.data || typeof messageData.data !== 'string') {\n    throw new Error(\n      `Invalid message \"data\": ${messageData.data} must be a valid string.`,\n    );\n  }\n}\n\n/**\n * Validates a TypedMessageParams object for required properties and throws in\n * the event of any validation error for eth_signTypedMessage_V1.\n *\n * @param messageData - TypedMessageParams object to validate\n * @param activeChainId - Active chain id\n */\nexport function validateTypedSignMessageDataV1(\n  messageData: TypedMessageParams,\n) {\n  if (\n    !messageData.from ||\n    typeof messageData.from !== 'string' ||\n    !isValidAddress(messageData.from)\n  ) {\n    throw new Error(\n      `Invalid \"from\" address: ${messageData.from} must be a valid string.`,\n    );\n  }\n  if (!messageData.data || !Array.isArray(messageData.data)) {\n    throw new Error(\n      `Invalid message \"data\": ${messageData.data} must be a valid array.`,\n    );\n  }\n  try {\n    // typedSignatureHash will throw if the data is invalid.\n    typedSignatureHash(messageData.data as any);\n  } catch (e) {\n    throw new Error(`Expected EIP712 typed data.`);\n  }\n}\n\n/**\n * Validates a TypedMessageParams object for required properties and throws in\n * the event of any validation error for eth_signTypedMessage_V3.\n *\n * @param messageData - TypedMessageParams object to validate\n */\nexport function validateTypedSignMessageDataV3(\n  messageData: TypedMessageParams,\n) {\n  if (\n    !messageData.from ||\n    typeof messageData.from !== 'string' ||\n    !isValidAddress(messageData.from)\n  ) {\n    throw new Error(\n      `Invalid \"from\" address: ${messageData.from} must be a valid string.`,\n    );\n  }\n  if (!messageData.data || typeof messageData.data !== 'string') {\n    throw new Error(\n      `Invalid message \"data\": ${messageData.data} must be a valid array.`,\n    );\n  }\n  let data;\n  try {\n    data = JSON.parse(messageData.data);\n  } catch (e) {\n    throw new Error('Data must be passed as a valid JSON string.');\n  }\n  const validation = jsonschema.validate(data, TYPED_MESSAGE_SCHEMA);\n  if (validation.errors.length > 0) {\n    throw new Error(\n      'Data must conform to EIP-712 schema. See https://git.io/fNtcx.',\n    );\n  }\n}\n\n/**\n * Validates a ERC20 token to be added with EIP747.\n *\n * @param token - Token object to validate\n */\nexport function validateTokenToWatch(token: Token) {\n  const { address, symbol, decimals } = token;\n  if (!address || !symbol || typeof decimals === 'undefined') {\n    throw ethErrors.rpc.invalidParams(\n      `Must specify address, symbol, and decimals.`,\n    );\n  }\n  if (typeof symbol !== 'string') {\n    throw ethErrors.rpc.invalidParams(`Invalid symbol: not a string.`);\n  }\n  if (symbol.length > 11) {\n    throw ethErrors.rpc.invalidParams(\n      `Invalid symbol \"${symbol}\": longer than 11 characters.`,\n    );\n  }\n  const numDecimals = parseInt((decimals as unknown) as string, 10);\n  if (isNaN(numDecimals) || numDecimals > 36 || numDecimals < 0) {\n    throw ethErrors.rpc.invalidParams(\n      `Invalid decimals \"${decimals}\": must be 0 <= 36.`,\n    );\n  }\n  if (!isValidAddress(address)) {\n    throw ethErrors.rpc.invalidParams(`Invalid address \"${address}\".`);\n  }\n}\n\n/**\n * Returns wether the given code corresponds to a smart contract\n *\n * @returns {string} - Corresponding code to review\n */\nexport function isSmartContractCode(code: string) {\n  /* istanbul ignore if */\n  if (!code) {\n    return false;\n  }\n  // Geth will return '0x', and ganache-core v2.2.1 will return '0x0'\n  const smartContractCode = code !== '0x' && code !== '0x0';\n  return smartContractCode;\n}\n\n/**\n * Execute fetch and verify that the response was successful\n *\n * @param request - Request information\n * @param options - Options\n * @returns - Promise resolving to the fetch response\n */\nexport async function successfulFetch(request: string, options?: RequestInit) {\n  const response = await fetch(request, options);\n  if (!response.ok) {\n    throw new Error(\n      `Fetch failed with status '${response.status}' for request '${request}'`,\n    );\n  }\n  return response;\n}\n\n/**\n * Execute fetch and return object response\n *\n * @param request - Request information\n * @param options - Options\n * @returns - Promise resolving to the result object of fetch\n */\nexport async function handleFetch(request: string, options?: RequestInit) {\n  const response = await successfulFetch(request, options);\n  const object = await response.json();\n  return object;\n}\n\n/**\n * Fetch that fails after timeout\n *\n * @param url - Url to fetch\n * @param options - Options to send with the request\n * @param timeout - Timeout to fail request\n *\n * @returns - Promise resolving the request\n */\nexport async function timeoutFetch(\n  url: string,\n  options?: RequestInit,\n  timeout = 500,\n): Promise<Response> {\n  return Promise.race([\n    successfulFetch(url, options),\n    new Promise<Response>((_, reject) =>\n      setTimeout(() => {\n        reject(new Error('timeout'));\n      }, timeout),\n    ),\n  ]);\n}\n\n/**\n * Normalizes the given ENS name.\n *\n * @param {string} ensName - The ENS name\n *\n * @returns - the normalized ENS name string\n */\nexport function normalizeEnsName(ensName: string): string | null {\n  if (ensName && typeof ensName === 'string') {\n    try {\n      const normalized = ensNamehash.normalize(ensName.trim());\n      // this regex is only sufficient with the above call to ensNamehash.normalize\n      // TODO: change 7 in regex to 3 when shorter ENS domains are live\n      if (normalized.match(/^(([\\w\\d-]+)\\.)*[\\w\\d-]{7,}\\.(eth|test)$/u)) {\n        return normalized;\n      }\n    } catch (_) {\n      // do nothing\n    }\n  }\n  return null;\n}\n\n/**\n * Wrapper method to handle EthQuery requests\n *\n * @param ethQuery - EthQuery object initialized with a provider\n * @param method - Method to request\n * @param args - Arguments to send\n *\n * @returns - Promise resolving the request\n */\nexport function query(\n  ethQuery: any,\n  method: string,\n  args: any[] = [],\n): Promise<any> {\n  return new Promise((resolve, reject) => {\n    ethQuery[method](...args, (error: Error, result: any) => {\n      if (error) {\n        reject(error);\n        return;\n      }\n      resolve(result);\n    });\n  });\n}\n\nexport default {\n  BNToHex,\n  fractionBN,\n  query,\n  getBuyURL,\n  handleFetch,\n  hexToBN,\n  hexToText,\n  isSmartContractCode,\n  normalizeTransaction,\n  safelyExecute,\n  safelyExecuteWithTimeout,\n  successfulFetch,\n  timeoutFetch,\n  validateTokenToWatch,\n  validateTransaction,\n  validateTypedSignMessageDataV1,\n  validateTypedSignMessageDataV3,\n};\n"]}